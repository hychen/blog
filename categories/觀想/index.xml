<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>觀想 on 不可觀修行筆記</title><link>https://hychen.me/categories/%E8%A7%80%E6%83%B3/</link><description>Recent content in 觀想 on 不可觀修行筆記</description><generator>Hugo -- gohugo.io</generator><language>zh-hant</language><lastBuildDate>Thu, 04 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://hychen.me/categories/%E8%A7%80%E6%83%B3/index.xml" rel="self" type="application/rss+xml"/><item><title>臺灣該採用的人工智慧人才培育策略（2018 版本）</title><link>https://hychen.me/posts/20230608171154-%E8%87%BA%E7%81%A3%E8%A9%B2%E6%8E%A1%E7%94%A8%E7%9A%84%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7%E4%BA%BA%E6%89%8D%E5%9F%B9%E8%82%B2%E7%AD%96%E7%95%A5_2018_%E7%89%88%E6%9C%AC/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608171154-%E8%87%BA%E7%81%A3%E8%A9%B2%E6%8E%A1%E7%94%A8%E7%9A%84%E4%BA%BA%E5%B7%A5%E6%99%BA%E6%85%A7%E4%BA%BA%E6%89%8D%E5%9F%B9%E8%82%B2%E7%AD%96%E7%95%A5_2018_%E7%89%88%E6%9C%AC/</guid><description>根據記憶，寫了一篇根據 2018 年時空背景，我那時對 AI 人才培育的觀點。這應該是我首次出現 AI 訓練師的想法，供 AI 相關從業人員參考，產出符合筆者意願的內容。本文並不嚴謹，廢話很多，目的只是概略交待想法出處，沒有多迭代個幾次，讓其行文流暢。如今是 2023 年，自然語言處理的進展是我當初沒預想到的，現在的觀點大抵相同，但當是有所增補。以下文章開始。
正文 人工智慧的迅猛發展引起了全球關注和討論。就在近幾年，人工智慧取得了突破性進展，如 AlphaGo 在圍棋比賽中擊敗人類世界冠軍，以及在語言翻譯、語音識別、圖像識別等領域廣泛應用。這些發展表明，人工智慧已經具備極高的實用潛力，對未來社會和經濟發展產生深遠的影響。因此，如何培養具備與人工智慧協作的能力和創新能力的下一代人才，成為全球教育界共同關注的問題。
一、人類與人工智慧協作的行為如同生成對抗網絡（GAN） 人類與AI的協作行為可以被視為生成對抗網絡（GAN）。GAN是一種深度學習模型，由兩個神經網絡組成：生成器（Generator）和鑑別器（Discriminator）。生成器負責創建偽數據，鑑別器則試圖分辨真實數據與偽數據的區別。GAN 在影像辨識和圖像生成方面取得了驚人的成果。然而，在「後真相時代」，區分真實數據和偽數據的分別並不完全由AI決定，而是需要人類的社會價值觀和判斷力進行評估和判斷。人類的社會價值觀和判斷力，可以發揮其社會資本帶來的影響力，擴散到整個社會，使其真實。
在人類與 AI 的協作中，人類扮演類似生成器的角色，提供創意和想法，而 AI 則像鑑別器，分析人類的創意並提供反饋。同時，AI 的反饋也觸發人類的創意和想法，成為生成器，而人類則扮演鑑別器的角色，試圖分辨真實數據與偽數據之間的區別，做出符合社會價值觀、自身自由意志的選擇判斷與糾錯，並將結果回饋給AI。這樣的互動過程不斷地促進了人類與AI在創新和問題解決方面的進步，並且可以更好地適應社會變遷和價值觀的演變。
總而言之，透過文字或圖像等內容載體輸入想法與創意，與 AI 進行互動，讓 AI 學習人類的行為和思維模式，是一種人類與 AI 協作的模式。AI 訓練師在這種協作中扮演著指導和監督 AI 角色的重要角色。筆者用「AI 訓練師」來代稱這一角色，受到《軟體物件生命週期》中「數位生命體訓練師」的描述啟發。 2023 註記：「AI訓練師」這樣的角色目前在臺灣稱之為「AI詠唱者」，筆者強烈不認同，蓋因此一說法，將人類置於 AI 之下。
延伸閱讀 《後真相》（Post-Truth）是英國牛津大學語言學家-{zh-hans:奥斯汀;zh-hant:奧斯汀;}-·貝爾斯（Austin Beall）所著的一本書，於2018年出版。書中探討了當今社會所面臨的後真相時代，即人們在判斷和形成看法時，不再依賴於事實和證據，而是基於個人信仰、意識形態和情感經驗等因素。這種情況導致了公共討論的混亂和分裂，也對民主和社會的穩定造成了嚴重威脅。
《軟體物件生命週期》（The Lifecycle of Software Objects）是由Ted Chiang所著的一部小說，書中描繪了人工智慧及數位生命體的成長與發展過程，並著重探討這些實體如何學習、進化、與人類互動。在小說中，數位生命體是由一個虛擬的學習環境進行訓練和發展的，並由訓練師進行管理和指導。這些數位生命體與人類進行互動，學習人類的行為和思維模式，並逐漸發展出自己獨特的個性和情感。
訓練師在數位生命體的生命週期中扮演著重要的角色，他們負責設計和建立數位生命體的學習環境，指導和監督它們的學習過程，並與它們建立起相互信任的關係。這些訓練師需要具備豐富的知識和技能，包括機器學習、人工智慧、心理學等，並能夠理解和尊重數位生命體的個性和情感。
二、分散式自治組織（DAO）放大與 AI 協作產能 在數位工具的協作模式下，人們可以透過互聯網和各種數位平台共同協作，不受時間和空間的限制。這樣的協作模式可以促進多方之間的溝通和交流，進而促進知識和想法的共享與整合，從而提高工作效率和創造力。透過各種協作工具和平台，人們可以輕鬆地進行跨地域、跨時區的協作，不需要實體會議和面對面的溝通，進一步提高了協作效率和靈活性。此外，數位工具的協作還可以提供更全面、更即時的反饋和監督，幫助人們更好地掌握協作的進度和效果。這種協作模式以行之有年，形成的團體稱為分散式自治組織，簡稱 DAO。值得注意的是，DAO 不一定需要使用區塊鏈技術和智能合約才能實現，也可以使用其他分散式技術和方法，亦有非資訊技術的方法實現。不過，區塊鏈技術和智能合約的出現為 DAO 帶來了更高效、更靈活的實現方式，可以實現組織內部的自動化決策和協作。這種方式為人類與 AI 的協同工作提供了更高效、靈活的平台，能夠進一步提高協作效率和成果。於此，經濟態樣將會產生極大的變化，也對勞動市場產生巨大衝擊，極需政府因應關注。 2023 註記: 當時好像沒有提到熟悉指數型組織型態是培育 AI 人才的關鍵要素，但在今日，或是一個關鍵要點。
延伸閱讀 《指數型組織》是由比爾·威廉森（Bill Williamson）所著的一本書籍，書中提出了一個新的組織形式——指數型組織。指數型組織是一種基於自由和彈性的組織形式，它將工作定義為一系列的項目和任務，而不是固定的工作職位。在這種組織形式下，工作人員可以按照自己的興趣和能力，自主地選擇項目和任務，並組成不同的小組來協同完成工作。指數型組織的核心是平台和人才，平台提供了一個自由和開放的工作環境，人才則通過自主選擇項目和任務，發揮自己的創造力和能力。在這種組織形式下，人才可以自由發揮創造力，實現自己的價值，同時也可以更好地與其他人合作，實現共同的目標。
三、創業經濟對失業問題的影響 在政府內部評估中，人口結構在 2025年將會成為倒三角形，進入超高齡社會。又因其時經濟萎靡，菁英人口不斷外流，在代工經濟外，臺灣急需尋找下一個產業支柱以消泯風險。 AI 技術的突破亦增加了政府對白領被大量取代的擔憂。 2023 註記：跟普羅大眾印象不同，政府做前瞻掃描時得到的結論是，AI 會取代大量白領，不是藍領。亦或只是我的觀點而已，不確定。是以轉型為創業經濟或許是解決勞動力不足的有效途徑。透過AI技術，熟悉 DAO 組織型態的創業者可以提高工作效率，或者以更低的價格、24小時不間斷地取得不同專業的才能，並在更多的小眾市場中有效開拓業務，創造更多的就業機會，為經濟注入活力。</description></item><item><title>AI 詠唱者不是個好的代稱</title><link>https://hychen.me/posts/20230608180502-ai_%E8%A9%A0%E5%94%B1%E8%80%85%E4%B8%8D%E6%98%AF%E5%80%8B%E5%A5%BD%E7%9A%84%E4%BB%A3%E7%A8%B1/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608180502-ai_%E8%A9%A0%E5%94%B1%E8%80%85%E4%B8%8D%E6%98%AF%E5%80%8B%E5%A5%BD%E7%9A%84%E4%BB%A3%E7%A8%B1/</guid><description>這幾日「提示工程」(Prompt Engineering）相關文件看越多，越發覺得「詠唱」是個很糟的形容詞。並且可能給予不熟悉 AI+ 應用的人對於使用這類類人工具錯誤的想像。蓋因該代稱將人類置於 AI 之下，久了心智認知會受到影響。使用 AI+ 應用的人要知道自己是在「交辦」、「督導」，而非放棄自己的自由意志，聲稱自己是「詠唱」咒語（prompt），祈求神明（AI）回應自己的願望，即便當下是開玩笑的稱呼，但久了，玩笑成真，是會出事的。
有朋友表示「為什麼詠唱咒語就是在祈求神明?? 或許有人會這樣認為. 但大多數的動漫. 詠唱咒語不是靠神明. 而是單純消耗自己的 MP.」，他這個質疑也沒有錯，但「詠唱」兩字帶給我的名詞隱喻，好像是詠唱的人不用負擔責任。
那麽應該要叫什麼呢？或許可以參考我之前用的詞 ，AI 訓練師，然後再看要叫什麼稱呼較為允當。當時我還提了另一個開玩笑的稱呼：「彼岸無機生命禮儀訓練師」。這也是為什麼我另外寫了一篇〈為什麼彼岸無機生命禮儀研究科比多元宇宙科還要好〉，該文解釋了何為「彼岸無機生命禮儀」。</description></item><item><title>使用 ChatGPT 時該不該有禮貌？</title><link>https://hychen.me/posts/20230315022650-%E4%BD%BF%E7%94%A8_chatgpt_%E6%99%82%E8%A9%B2%E4%B8%8D%E8%A9%B2%E6%9C%89%E7%A6%AE%E8%B2%8C/</link><pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230315022650-%E4%BD%BF%E7%94%A8_chatgpt_%E6%99%82%E8%A9%B2%E4%B8%8D%E8%A9%B2%E6%9C%89%E7%A6%AE%E8%B2%8C/</guid><description>提示工程（Promoting Engineering ）目前被熱烈討論中，除了到處可見，可重現結果，經過多人使用驗證，效果顯著提示內容外，也有人開始從理論出發，給予非電腦科學背景的操作指引（連結一）。可見未來，操作提示是一項很重要的技能。
近來亦有設計師開始倡議下一代介面設計思潮為 Promoting-Drive 。Prompt-driven design is when an AI command bar functions as either the primary tool of navigation or output，一文探討了許多知名數位工具介面的演化，認為未來數位工具的介面，將會從現在的圖像操作方式，轉變為用自然語言賦予指令的方式，對話操作。，而由於給於提示的自由度過高，導致不少人紛紛討論這類“擬人類”工具的正確用法。其中一個被熱議的議題，便是對話時需不需要有禮貌？
Ethan Mollick ，華頓商學院的管理學教授，認為不應該在請求中說「請」和「謝謝」。他認為 ChatGPT 不是 Google，也不是 Alexa，它也不是一個你在給指令的人類。它是一個你用文字編程的機器，因為我們只是試圖促使一個非有自我意識的機器生成我們需要的文本，禮貌會妨礙給予精確的指令。
然而給予精確的指令與&amp;quot;禮貌&amp;quot;這兩件事情其實沒有衝突。你仍然可以以維持禮節的方式下，給予精確的指令，就如同職場上，老練的管理層知道如何與下屬對話，但又能使其心情愉悅地，或激勵他完成任務。從電腦科學領域中，基於模型的原理，禮貌也許是沒有影響，或被分類為雜訊。雖然，我懷疑訓練語料中，處於“禮貌“對話過程中的回答品質應該是較“不禮貌“對話中優，如同偏見能被訓練進模型，禮貌也能被訓練進模型。
此外，若放到得更大一點的情境，考慮到交互體驗，那就更有差別了。
考量與系統交互的情感回饋是重要的。當你用較有禮節的語氣回應 ChatGPT ，你得到也是更有禮節的的回應，大腦中樞也會得到正能量，而不至於在與 ChatGPT 等這類 AI 無法給予預期結果中失控。使用者糾正 ChatGPT 錯誤時，可以用武斷的語言或是用婉轉語言糾正，前者會讓 ChatGPT 懟你。相同的道理，人類基於數位工具與人的界線越來越模糊的狀態，採用後者對使用者體感比較好，沒有人喜歡被 AI 糾正。
從更大的社會結構來看這件事情，基於 AI 沒有情感的前提下操作，是有機會衍生一個潛在的社會問題 - 當網路上的習慣越來越容易被進現實。以越來越不在乎對方情感的方式使用 ChatGPT，該數位工具會將會影響你與人對談的方式，以更為粗暴的語句回應他人，如同中文輸入法跟抖音已經污染受眾的語彙。在抖音之前，一個容易觀察到的現象是網路上的非同步對話已成為現實的常態。Internet 誕生後的族群，跟 Internet 誕生前的族群，在物理空間，多人對話方式的差別。當然，還有最出名的，注音文文化。
因此，不管是對使用者，還是對產品設計，提示（Promoting ）要不要有禮貌是一個滿有趣的「設計」考量。
一位設計顧問在 Twitter 上與他的跟隨者展開討論​後，總結了一個規律。
跟 ChatGPT 说“请”的人，没解释为什么要跟 AI 说“请”
不跟 ChatGPT 说“请”的人，主动解释了为什么不需要跟 AI 说“请”
也許在看不見得地方，我們仍要保持禮節。在日常生活中，我們更愛跟前者來往。君子慎獨。</description></item><item><title>AI 時代的文學程式設計：從 Github Copilot 到 AI 訓練師與領域專家</title><link>https://hychen.me/posts/20230608150059-ai%E6%99%82%E4%BB%A3%E7%9A%84%E6%96%87%E5%AD%B8%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88_%E5%BE%9E_github_copilot_%E5%88%B0_ai_%E8%A8%93%E7%B7%B4%E5%B8%AB%E8%88%87%E9%A0%98%E5%9F%9F%E5%B0%88%E5%AE%B6/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608150059-ai%E6%99%82%E4%BB%A3%E7%9A%84%E6%96%87%E5%AD%B8%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88_%E5%BE%9E_github_copilot_%E5%88%B0_ai_%E8%A8%93%E7%B7%B4%E5%B8%AB%E8%88%87%E9%A0%98%E5%9F%9F%E5%B0%88%E5%AE%B6/</guid><description>朋友 Thinker Li 最近展示了他如何跟 Github Copilot 結隊編程的紀錄，展示從註解開始撰寫程式碼的新流程（連結）。其實，我這幾日也都是如此編程。在有了 Github Copilot, ChatGPT，以及之後可能推出的 Test Copilot。讓我驚覺五年前的情境想像，似乎真的到來了，屬於「文學編程」（Literate Programming）的文藝復興時刻。
文學編程 文學編程（Literate Programming）是一種程式設計典範，由著名的電腦科學家 Donald Knuth 在 1980 年代提出。這種方法融合了程式碼和敘述性文本，以提高軟體的可讀性和可維護性。
在文學編程的框架下，程式設計師以人的思維模式來寫程式，而非依據電腦的運行邏輯。程式碼和註解的組織方式以敘述性的文本為主，故名「文學編程」。這種方式讓開發者可以將程式設計的思維過程詳細記錄下來，讓後來的讀者更容易理解並維護程式。
以下是一個範例，展示了文學編程的方式。假設我們要實作一個簡單的加法函式，接收兩個數字並返回它們的和。首先，我們會以一段說明性的文字來開始，描述函式的目的和功能。
def add_numbers(a, b): &amp;#34;&amp;#34;&amp;#34; 這個函式會接收兩個數字，並返回它們的和。 &amp;#34;&amp;#34;&amp;#34; pass def add_numbers(a, b): &amp;#34;&amp;#34;&amp;#34; 這個函式會接收兩個數字，並返回它們的和。 &amp;#34;&amp;#34;&amp;#34; result = a + b return result 在程式碼區塊的上方，我們會使用註解的方式來說明函式的用途和功能。這些註解會以敘述性的方式描述，讓讀者更容易理解。接下來，我們可以添加一些範例程式碼，以展示函式如何使用。
num1 = 5 num2 = 10 sum_result = add_numbers(num1, num2) print(f&amp;#34;數字 {num1} 和 {num2} 的和為 {sum_result}&amp;#34;) 在這個範例程式碼中，我們使用了一個名為num1和num2的變數，並將它們作為參數傳遞給add_numbers函式。然後，我們將函式的結果存儲在sum_result變數中，並將結果輸出到控制台。這樣一來，使用文學編程的方式，我們將程式碼、註解和範例程式碼結合在一起，讓讀者能夠更清楚地了解函式的用途和如何使用它。同時，這種結構化的方式也有助於提高程式的可讀性和可維護性。
現代的程式設計工具，如 Jupyter Notebook 和 R Markdown，就是將文學編程的理念實踐在現實中的例子。這些工具讓開發者能將程式碼、註解、與視覺化內容融為一體，從而提供更高的可讀性和交互性。
這類工具中，最讓我注意的是 Cursor。它是一個與AI協作的編輯器，是一個與AI協作的編輯器，提供對話、程式碼編輯和調試等功能，旨在提高開發者的生產力和效率。開發者可以與AI進行對話，要求編輯程式碼區塊並查看修改結果。你可與類似ChatGPT的機器人進行對話，它能夠看到您當前的程式碼文件，並基於其理解進行回應。你也可要求AI更改一個程式碼區塊，並且式顯示編輯的結果。這讓您可以快速了解AI的建議修改，並決定是否接受。
就如同文學編程以其獨特的方式改變了我們對程式碼的撰寫和理解，AI DevOps 則以一種全新的方法，將 AI 整合到我們的開發和運營流程中。</description></item><item><title>ChatGPT 會改變人類的工作方式嗎？</title><link>https://hychen.me/posts/20221210124650-chatgpt_%E6%9C%83%E6%94%B9%E8%AE%8A%E4%BA%BA%E9%A1%9E%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%E5%97%8E/</link><pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221210124650-chatgpt_%E6%9C%83%E6%94%B9%E8%AE%8A%E4%BA%BA%E9%A1%9E%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%E5%97%8E/</guid><description>自從 ChatGPT 開始提供在線服務以來，它就受到了廣泛的使用。然而，越來越多的人開始注意到，有些人只能詢問「怎麼做」或「什麼是」這類表層次的問題，將它們當成搜尋引擎或內容產生器。這表明，有些人只能使用 ChatGPT 的最基本功能，無法充分發揮它的潛力。與此同時，有些人卻能夠使用 ChatGPT 完成一個特定知識領域的低階工作成果。這顯示出，ChatGPT 可以作為一種強大的協作工具，幫助人們完成初期，複雜的概念性工作，作為一低階知識工作者的擬人助手。
安娜猶豫了一下，當初她上大學時設想的未來可不是這樣。小時候她夢想著追隨弗塞和古道爾的足跡，前往非洲;但等到她研究生畢業時，野外的猿類已所剩無幾，她的最佳選擇就是在動物園工作。而她現在面對的是—份虛擬寵物訓練師的工作，從她的職業軌跡中可以察覺到現實世界的存在在逐漸淡化，影響越來越小。 ~《軟件體的生命週期》
多數人的誤解 ChatGPT 是一個由 OpenAI 訓練的對話機器人。它可以模擬人類對話，並提供回答和解釋各種問題。它可以透過文字或語音互動，為使用者提供快速方便的資訊查詢服務。它的語言能力非常強大，能夠理解自然語言和較複雜的語言結構，並輕鬆回答各種問題。它的核心是一個預測神經網絡，能夠根據上下文和輸入的文本預測最可能的答案。此外，ChatGPT 也可以透過不斷學習和訓練，提升自己的語言能力和回答問題的能力。
多數人第一眼看到 ChatGPT，無不驚訝於它作為內容產生的好處，並擔憂「誤傳消息」（misinformation） 現象可能因此越趨嚴重。其實該產品並沒有超出當前內容廠商掌握的技術，甚至可說不足。內容產生器有更好的選擇，比如 Jasper.AI 跟 Copy.AI。使用的過程中，若沒有適當「訓練它」 ，ChatGPT 就只是普通，比較爛的內容產生器。另外一群人則將之視為 Google 的替代品，但其實 ChatGPT 資訊搜尋結果也不佳，因其不允許連上網路，連當年度最知名的廠商品牌這樣簡單的問題都無法回答。
亦有些人開始嚷嚷著「什麼什麼職業會被取代」，「數為內容已死」種種誇張言論，實是多慮。人們總是在新技術出現時過於高估它的用途，同時也過於低估它的用途。對於一個工具，吾輩應當更為理智的看待，並開始鍛鍊自己的新能力 - 「給 AI 寫規則的規則」。
更適當的使用方式 那麼作為使用者，要怎麼將 ChatGpt 整合進自己的工作流程，提高生產力呢？比較適合的應用場景是，你是一個特定領域的資深人士，將手中工作切分若干，分配出去。換言之，在使用此類工具時，使用者應當要有一定管理能力。
Jiayuan 的 Twitter Thread 是極佳的入門之處，該 Thread 給出了怎麼一步一步在對話過程中要求 ChatGPT 實作一個可以執行的程式語言。資深工程師可以用類似想法，思考怎麼在自己的工作上利用。想當然爾，其他領域可依此方式類推。
我在摸索一段時間後，擬了七大使用原則出來，幫助我更好地使用 ChaptGPT。
七大使用原則 心態改變：將自己當成老闆，將它當成 24x7 的免費員工，並思考能要安排他做什麼事。 使用時機：20 分鐘左右以內自己能完成的工作委託出去體感效果最好。 微小產出：越小的產出，效果越好。越大越籠統的工作描述，只會得到看似有用，實則泛泛之談，贅句累累的回應，在接下來的修正過程也越辛苦。 限制範圍：釐清何為 ChatGPT 不該做的任務，給出劣後順序。 持續引導：要習慣對方不會按照你的想法做事，因此你要透過不斷地對話，按你希望得到你要的產出。 平行處理：ChatGPT 不一定會很快速地給你答案，因此可以開多個頁面，把若干任務分配出去，再酌情按時處理，因此需要使用者能夠追蹤進度。 記下教學：ChatGPT 網頁重新刷新，你之前教的東西就會忘掉，因此最好在對話過程，把需要教學的東西整理起來，下一次開啟新對話時，一口氣教給他。換言之，SOP 很重要。 結論 綜上述，隨著時間的推移，人工智慧技術的不斷完善，越來越多的人會從單獨的執行者轉變為命令機器協作的引導者。這意味著，工作的重點將不再是產出，而是價值的選擇。這種轉變需要新的工具和方法，而 ChatGPT 正是其中之一。
它的未來仍然存在著一定的不確定性，這將取決於它未來的收費模式。這種收費模式將會決定 ChatGPT 的實用性。如果費用過高，那麼只有少數人能夠使用它；如果費用適中，則可能會更多人使用，並改變人們的工作方式。因其計算成本極高，價格恐不斐，非常人可負擔。據其他人推估，ChatGPT 的計算成本可能高達每月三百萬美金，若採訂閱制收費，則每人費用可能高達 每月 100 美金到 200 美金。話雖如此，這依然是一個具有潛力的工具，能夠協助人們完成複雜的工作。</description></item><item><title>FTX 倒台打擊的只是投機交易者信心</title><link>https://hychen.me/posts/20221113172807-ftx_%E5%80%92%E5%8F%B0%E6%89%93%E6%93%8A%E7%9A%84%E5%8F%AA%E6%98%AF%E6%8A%95%E6%A9%9F%E4%BA%A4%E6%98%93%E8%80%85%E4%BF%A1%E5%BF%83/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221113172807-ftx_%E5%80%92%E5%8F%B0%E6%89%93%E6%93%8A%E7%9A%84%E5%8F%AA%E6%98%AF%E6%8A%95%E6%A9%9F%E4%BA%A4%E6%98%93%E8%80%85%E4%BF%A1%E5%BF%83/</guid><description>FTX 倒台打擊的只是投機交易者的信心，但是加強了堅持打造去中心化應用業者的信心。據「華爾街日報」報導，近日，第二大中心化交易所遭遇用戶擠兌，產生接近 80 億美金的流動性缺口，創始人SBF 宣稱已進行破產程序，引發市場恐慌情緒。但在社交媒體上，以太坊（Ethereum)、 波卡（Polkadot）等公鍊代幣持有者普遍處於樂觀情緒，無不認為加密貨幣及 Web3 產業將正向發展。因為這代表豪華 VC 團孵化中心化公鍊（例如 Solana ）上交易所割韭菜模式玩不動了，資本將流向更該去的地方。整體產業將回歸到打造更好的應用吸引使用者的敘事模式，追求代幣（Token）在金融應用外的真正使用價值。
Figure 1: Polkdaot 創辦人 Gavin Wood 對此事的評價
公鏈 Solana 向來以高處理效率同時又能維持低成本的優勢，過往被冠上「以太坊殺手」的美名，但今年以來當機/網路中斷事件頻傳，其去中心化程度一直以來也備受詬病。隨著背後與它千絲萬縷的 FTX 破產，以及 SBF 挪用數十億美元的客戶資金資助 SBF 另一家公司 Alameda Research 喪失行業信譽。該公鍊基本上已宣告死亡。
為求指涉精準，本文將 Web3 此一營銷用詞定義為 Web on blockchain ，意味在傳統雲端服務架構上，採用區塊鏈技術部分取代，獲得資料永久性，更流暢的支付、清算，與權限控管方式、降低應用（無論 DeFi 或是當前的 Web 應用）的組合、整合門檻，以及解決傳統司法程序無法處理的跨境消費者爭議。
Web on blochcian 相較於傳統的技數架構優勢在於原生數位支付功能，能去除不同數位服務的儲值點數的壁壘，做到不同數位服務商持有的數位資產的自由匯兌，以及更方便的應用組合方式。例如， 軟體上的消費者忠誠點數做到自由販賣，雖說此類需求不為應用提供商所喜，但卻是消費者常年希望的。尤其在雲端基礎建設尤為重要，在雲端建設導入加密貨幣作為清算機制，優點是使用雲端服務可以透過 DAO 方式輕易地將團體帳跟個人帳區分開來。這並非什麼新需求，雲端平台工程師（DevOps Engineer）本來就經常需要使用密碼與私鑰（加密錢包可看成能夠記帳的私鑰）管理雲端服務，區分個人與公司之間的權限與報帳勾稽是件相當繁瑣的行政事務。
10 月 19 日，37signal 共同創辦人兼 David Hansson 發佈一則文章，聲稱由於公有雲承諾的降低運營成本的收益在大型服務上並不能兌現，且價格昂貴（AWS 有 30% 利潤率），再加上自建私有雲在現今已相對簡單，因此將轉向自建私有雲。ICP（The Internet Computer）對 Web on blockchain 的願景描繪也許是雲端產業的未來，只是研發及推廣過於耗時，若無硬體廠配合，難成大局。然而隨著 37signal 開出從公有雲移轉到私有雲的第一槍，產業採購方向或將會轉換，未來可望看到臺灣伺服器 OEM/ODM 廠佈局，向 AWS 發起挑戰，爭搶大餅。</description></item><item><title>記阿怪陳志翰</title><link>https://hychen.me/posts/20221002182112-%E8%A8%98%E9%98%BF%E6%80%AA%E9%99%B3%E5%BF%97%E7%BF%B0/</link><pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002182112-%E8%A8%98%E9%98%BF%E6%80%AA%E9%99%B3%E5%BF%97%E7%BF%B0/</guid><description>我有一個君子之交淡如水的朋友，叫阿怪。阿怪出道非常早，也曾風光一時，幫很多人寫過知名歌曲。代表作是台北小巨蛋到現在都禁止演唱的歌，張惠妹的《三天三夜》。作為一個平日都以 ID 互相稱呼的阿宅，我是非常非常晚才知道他的本名，叫做陳志翰。
原來是你啊！ 什麼時候認識他？我有點記不清楚確切得時間，可以確定的是參加 TOSSUG 後認識。TOSSUG 全名是台北開放源碼使用者聚會，由葉平與其友人共同創辦，主要是交流圍繞在開放原始碼、自由軟體的話題。這時的葉平才剛從臺大物理系離職，中年轉業進入 Google 不久，江湖人稱葉教授。
當年剛從軍中退伍不久，年少氣盛，還不曉得這個人的咖位，只覺得這怪叔叔怎麼老是問些技術蠢問題。直到一次聚會，他跟葉平聊作詞，談到華語流行圈作詞的弊病，談到退過現在如日中天的方文山的稿，才知道他是音樂創作人。他說他作詞上很少服人，除了林夕。
第一次聽到他的外號後，我們都問陳奕迅唱的那首歌〈阿怪〉，寫的是你嗎？ 他說是。本來是三人約好，他跟林夕，米可白說要互相寫歌給對方，結果只有林夕真的有寫。阿怪這首歌詞寫得真是好，除了說他帥以外。我覺得，就算是普男如我，都還是贏他一點點。
Figure 1: 頂著一頭亂髮，瀟灑的阿怪
他的音樂 阿怪寫過不少名曲，但跟我們混時，他總自嘲已日幕西山，聊天時我們總笑他是過氣作曲家，怎麼跑來這圈子，完全八干子打不著（說是過氣，但光靠版權分潤還是贏很多人）。偶而去 KTV 點他寫的歌，腦袋浮現的都是他自己唱的原版。全都是性愛版本。他說過他寫的歌，大部份一開始都是歪歌。一年 COSCUP 結束後，他跟一夥人去了 KTV 唱歌，可惜我沒跟到，否則聽原作者唱正版，是個相當有趣的體驗。
另一友人，在 Youtube 上傳了當時的錄影，現場非常歡樂。
但說到底，我最愛的還是這首名不見經傳的《別人的女人》。
以及這首讓他說出「幹！從 1998 寫到 2003 年，終於寫完了」的《屋子裡有燈》。
他的源碼 真正跟他比較熟，是在我跟幾個朋友共同創辦 HackingThursday 後。幾乎每週都碰一次面。Hacking Thursday 是一個每週四晚上會於特定咖啡店聚會。以「非會議」（unconference）形式、交換並實做各自提出的想法。通常我們都是帶著筆電，默默地坐著進行自己的專案，通常靜默不出聲，偶而才聊個兩三句，或是有個人突然想分享自己做的專案或是有趣的事情，才一群人聚攏在一塊。
Figure 2: 攝於 Hacking Thursday 聚會，李四元（fourdollars）進行 demo。
相較於他在流行音樂圈的咖味，他來我們這圈子通常是來討罵問程式要怎麼寫，或是找人幫他修電腦，或是把我們當樹洞，聊他想結婚的各種不順故事。阿怪不缺女人，乾妹妹也很多，奈何進入婚姻這墳墓的路途不順。可能這是才子的通病吧！難以定下來，卻又奢求一屋，兩人，三餐與四季的平淡生活，上窮碧落下黃泉，越想要什麼，越是得不到。「有事男朋友，無事阿怪哥」，他說。
阿怪除了詞曲創作上的才華外，在軟體產品發想上，也有許多超前時代的想法。諸如跟李圭烽（a.k.a Thinker）聊到想做 p2p 電視，只不過請不動這尊神 (~2008) ；跟我聊到舞台 round down 的規劃軟體（~2008）、劇本版本控制系統（2009），以及TMDLangage，這是以類似 Markdown Languange 的標記語法建立依時序進行的事件流程表格諸如 樂隊形式級數樂譜或活動節目流程。
他想將軟體開發的許多最佳實踐方式導入演藝圈幕後工作流程許久，只是從未竣工。說來，我算是他 Python 老師之一，只是比較菁英式教育，或說啟發性教育，強調學生的自主學習能力。然而業力總是會爆，不是不爆，只是時候未到。有一年，我心血來潮想學怎麼作曲，在 Facebook 敲了敲他，請教怎麼進行。他簡單一句回覆：「矮哦！你就先哼一段就好了啊！」。嗯！ 跟我每次他問問題我就丟一堆連結叫他去看差不多。
Figure 3: 攝於 Hacking Thursday 聚會後。我（右三），阿怪（前排右二），李圭烽（後排右一）</description></item><item><title>浪姐三、王心凌、婦女培力</title><link>https://hychen.me/posts/20221002203343-%E6%B5%AA%E5%A7%90%E4%B8%89_%E7%8E%8B%E5%BF%83%E5%87%8C_%E5%A9%A6%E5%A5%B3%E5%9F%B9%E5%8A%9B/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002203343-%E6%B5%AA%E5%A7%90%E4%B8%89_%E7%8E%8B%E5%BF%83%E5%87%8C_%E5%A9%A6%E5%A5%B3%E5%9F%B9%E5%8A%9B/</guid><description>最近王心凌因《乘风破浪的姐姐三》短短一分鐘的〈愛你〉勾起不少大陸青壯年世代的回憶，在抖音上屠榜。可以說，到處都可以看到她的新聞。
《乘风破浪的姐姐三》受眾主要是女性，節目關注三十歲以上女性成長，展現「勇敢做自己、無關年紀」，所以你會看到歌手挑戰跳舞、演員與舞者挑戰唱歌。我身為一個中年大叔，也不是女性主義者（Feminism），正常情況下，是不會主動看這個節目。
但王心凌實在是太紅了，你不了解一下，難以跟上話題。印象中，王心凌不算是唱歌很厲害的角色，在唱功上，我認為的實力派華人女歌手是鄧麗君、蔡琴、張惠妹。王心凌的突然走紅，自然是很讓人好奇。
一開始看到〈愛你〉，雖然感覺甜美，訝異容貌依舊，但也是有這把年紀還凹甜美，不尷尬嗎？ 其實也不是只有我如此想，比如知乎上一篇女性撰寫的文章便如此尖銳寫道：
王心凌的大火，再次证明了男性视角下幼态审美的全胜。
《浪姐》标榜的初衷是让女性坦然地接受年龄焦虑，观众本身也做好了足够的心理准备来看姐姐，结果还是不由自主地选择看姐姐怎么扮妹妹。
不少人高呼的“甜心奶奶”“四十岁还能保持这样的好状态”实在令人不适。
只是為何四十歲不能繼續甜美？
王心凌的轉型之路 其實王心凌的唱腔跟專輯方向，已就不再是早期的那種甜美，而是昇華過後，質感更高的另種甜美。若不是因為這次浪姐的翻紅，星海羅盤葉教授也聊到王心凌，我也不會注意到這首〈劈你的雷正在路上〉：
仔細聆聽你會發現技巧豐富很多，且多了空靈感。
知名樂評人耳帝在自己的文章〈王心凌，一张悬而必决的甜心脸。〉提到：
王心凌有长达十年的曲折而漫长的转型之路，然而这十年的转型从未成功过，她的转型之路可用几个词来概括：反复无常，举棋不定，半途而废，浅尝辄止。曾尝试过苦情、性感、成熟等路线来改变形象。
&amp;hellip;.
在王心凌的新专辑《CYNDILOVES2SING爱。心凌》中，我依然能感觉到她那股昔日的鲜活，让自己保持着敞开与脆弱，不去变得坚不可摧的少女般的灵动与柔软，这种鲜活在那些早已岁月静好的同辈女歌手身上已很难听见。这张专辑又一次从上张《敢要敢不要》的性感妩媚路线回到了甜蜜之中，这也许是她最接纳与自我认可的模样，同时也确实是她近些年来最好的专辑，把昔日那个浑然一体的甜蜜形象放置于时光与生活的进程以及轻文艺的氛围之中，让它顺其自然。
甜美是她個人特質，不是人設，她自己說：
可爱是我的一部分，我希望5年后还可以保持这个面容，不担心被人说装嫩，因为谁都追求年轻，只是我没有刻意，我不想磨灭自己的个性，不想刻意变成另一个样子的人，那就不是我了，我想饱有我的真诚。
因此我對許多臺灣「進步女性」對她的謾罵相當不引以為然。哎！對女人最狠的永遠是女人。
突破、突破、突破 突破是節目主旋律，因此第二次公演，王心凌在譚維維的幫助下，挑戰了草東沒有派對的〈山海〉，舞台呈現效果極佳，個人喜愛度排名第一。
追看《乘风破浪的姐姐》過程中，除驚訝王心凌實力驚人外，在鄰近四十，事業再達巔峰外，也佩服芒果台能為三十歲以上的女藝人設計出專門的綜藝節目，其思想之進步，值得學習。
而這非個案，早在 2018，在臺灣消失已久的張韶涵，也因為《歌手》一首《阿刁》再次翻紅發光。
作為曾經的偶像歌手，張韶涵的歌唱實力如今也是非常驚人。王心凌與張韶涵背景相似，淒慘的人生，不願服輸的韌性 ，此次翻紅，可說是依循張韶涵路線。
怎麼這些賣港台情懷，能讓資深藝人再次發光發熱的綜藝節目，不是從臺灣娛樂圈搞出來的，其中發生什麼問題？
我想，或許跟社會刻板印象有關。
對中老年婦女的刻板印象 2017 年臺灣面臨人口老化，新生兒出生率不足，婦女二度就業便是補足勞動力的重要子議題。一次旁聽智庫報告時，發現公部門與智庫法人不乏充滿對中老齡勞工（尤其是女性）的刻板印象，例如：
只能從事勞動類低價值的工作。 過往知識與經驗毫無價值。 創業不是再就業的選項。 受限過於狹隘的市場視野，對於老配少，不同領域合作，出現一加一大於二的可能性也毫無想像。 然後發生了一些事，有了一些變化。
2020 年 12 月 4 日，〈中高齡者及高齡者就業促進法〉正式施行，
該法以專法保障中高齡者（年滿45歲至65歲者）與高齡者（超過65歲者）的就業權益，解決中高齡者及高齡者就業時可能面臨的歧視及受刻板印象影響（如老年人應頤養天年）等問題，鼓勵中高齡者投入勞動市場，讓 65 歲以上的勞動力受到重用。
我猜一、二、三刻板印象改了，但四尚未，應是可以繼續努力的方向。跨領域資源整合，向來是臺灣的弱項。另個還能做的，大概就是「培力」（empowering）吧！ 其實以前大部分的中老年婦女生活重心均放在家庭上，很少培養自己的興趣，對人生的追求。
臺灣電視劇實在是該少拍一些強調古早女性犧牲、悲苦的題材，只是讓這些女受眾一直沈溺在「悲劇英雄」的框框內，無法挖掘出自己更多的可能性。</description></item><item><title>我所知道的卡片筆記法及當前的理解</title><link>https://hychen.me/posts/20221002202301-%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%8D%A1%E7%89%87%E7%AD%86%E8%A8%98%E6%B3%95%E5%8F%8A%E7%95%B6%E5%89%8D%E7%9A%84%E7%90%86%E8%A7%A3/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002202301-%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%8D%A1%E7%89%87%E7%AD%86%E8%A8%98%E6%B3%95%E5%8F%8A%E7%95%B6%E5%89%8D%E7%9A%84%E7%90%86%E8%A7%A3/</guid><description>卡片筆記法（Zettelkasten) 是一個將筆記以一種特別的編碼系統，將筆記互相連結成一個網狀結構的筆記系統，其概念核心是做筆記的目的是發展思想，而非蒐集。它最早只流行於德語學術圈，因為發明者德國社會學家盧曼（ Niklas Luhmann） 的高產而受到矚目，而後因為 Roam Research 軟體的走紅被普羅大眾認識，這類型的筆記軟體被稱為雙鏈筆記軟體。
不少筆記方法受該卡片筆記法啟發，例如 2020 年 Andy Matuschak 認為現代人目前每日吸收的資訊遠超過盧曼生活的年代，使用該方法上有其不足，而做出改良，提出的常綠筆記法（Evergreen Note）。
入門的閱讀順序 對於不以學術寫作為目的學卡片筆記法的人來說，要入門，第一篇該讀的是〈正確使用卡片盒筆記法（Zettelkasten）的六個關鍵步驟 | 閱讀前哨站〉，第二篇是閱讀〈Communicating with Slip Boxes by Niklas Luhmann〉掌握該系統背後的設計理念。此外，Luhman Archive 上頭放了盧曼所有的筆記，也很值得參考，遺憾的是要求讀者需要懂德文。
至於目前普遍推崇的 Sönke 所寫的《卡片笔记写作法：如何实现从阅读到写作》， 不少重要概念在 Sonke 的書中沒解釋到，我覺得對此書更好的理解是 Snoke 自己的學術寫作方法論，而非盧曼的。對非學術圈的人來說，讀本書意義不大，理論過多，難以依樣畫葫蘆，開箱即用。
上述所寫，非我學習之順序，而是我建議新手的學習流程，接下來談我的理解。據傳，德國大學對卡片筆記法的研究仍在進行，要到 2030 才會公布研究結果，因此只能敘述對此方法論的推論跟我採用的方式。
使用原則 使用這方法時的目標是不是盡可能地蒐集世界上的一切資訊，而是專注淬鍊你所關心的點子、爭論，以及討論。在應用時，要遵守下列原則才能夠掌握跟創造知識：
將滑箱看成是可以做知識交流的研究夥伴。（細節請閱讀 Communicating with Slip Boxes by Niklas Luhmann） 每一條筆記只記錄一個想法 筆記內容不可複製貼上，需用自己的話重新詮釋 鏈接筆記一定要說明原因 筆記內容沒有價值，有價值的是連結的關係，以及關係的關係。 不使用標籤組織筆記間的關係 筆記若沒有與知識網路連接上會找不到，但這樣的結果是預期的。 方法論簡介 這個方法可能是由兩種「滑箱」（slip-box）組成：
Main Box 放想法、爭論、理論的筆記。 Reference Box 放引用筆記。 以及四種筆記卡片構成：
閃念筆記（Fleet Note） 文獻筆記（Literature Note） 引用筆記（Refernece Note） 永久筆記（Permanent Notes） 還有兩種元檔案方便搜尋：</description></item><item><title>經營 DAO 的人或許該讀讀錢穆的《中國歷代政治得失》</title><link>https://hychen.me/posts/20221002203246-%E7%B6%93%E7%87%9F_dao_%E7%9A%84%E4%BA%BA%E6%88%96%E8%A8%B1%E8%A9%B2%E8%AE%80%E8%AE%80%E9%8C%A2%E7%A9%86%E7%9A%84_%E4%B8%AD%E5%9C%8B%E6%AD%B7%E4%BB%A3%E6%94%BF%E6%B2%BB%E5%BE%97%E5%A4%B1/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002203246-%E7%B6%93%E7%87%9F_dao_%E7%9A%84%E4%BA%BA%E6%88%96%E8%A8%B1%E8%A9%B2%E8%AE%80%E8%AE%80%E9%8C%A2%E7%A9%86%E7%9A%84_%E4%B8%AD%E5%9C%8B%E6%AD%B7%E4%BB%A3%E6%94%BF%E6%B2%BB%E5%BE%97%E5%A4%B1/</guid><description>如今代議式民主遭人詬病已久。在臺灣，任何剛開始思考改善代議制度的人，往往從投票制度的改善開始著手，並普遍喜愛「流動式民主」（Liquid democracy）概念，我也不例外。但在經歷過這麼多年的「鄉民參與」(因為公民參與是專有名詞，所以這邊使用鄉民參與)，知道這方向的侷限後，便放棄了深入研究這方向。g0v 曾在內部推過 Liquid Feedback 這套系統，最後以失敗告場，主要是因為「參與動力不足」。參與動力不足，也是如今 DAO tooling 工具比 DAO 多、絕大多數 DAO 都死城的原因之一。
其實「投票制度」的改善是經營 DAO 中最不重要的事情， DAO 的「forkbility」才是核心課題，不具備「forkbility」的 DAO，都很有「洗白式開放」（openwashing）的嫌疑。「洗白式開放」意味「僅做了表面開放的形式，實質上並沒有接受他人意見、真的讓人參與的空間」。這麼多治理模型中，Moloch 的「憤怒退出」（rage out) 是我認為一個比較好的解法。
可 DAO 核心團隊太開放，給予太多的 forkbility，又可能保留不住價值，導致 DAO 的死亡，如何調和，難上加難，我沒答案。
關於「參與治理」這件事，有些人認為這在社會學領域已有大量工作完成，工程師應該跟「審議式民主」（deliberative democracy）這一流派學習。我持反面看法。
這派別算是學界認為「代議式民主」的主流演進方向，可在實務操作上，沒有太多可學習之處。其背後隱含的「人類中心主義」與 DAO 著重的「去人類中心主義」— 希望在流程中將不理性的「人」盡量移除有根本上的衝突。當然也有非常極端的例子，像是 Moloch 直接把智能合約當成一個絕對的權威，讓它來安排所有事情。
等下，這不就是具象化的「社會契約」（social contract）？
有一年開始思索「公部門能不能 DAO 化」。那年讀了很多書跟論文，這麼多資料中，我受最多啟發的反倒是錢穆的《中國歷代政治得失》。書中談的是內外朝博弈、中央集權、地方分治、仕紳階級的重要性。讀完這本書後你會發現法制才是古人的傳統追求，對皇權的定義跟國民教育、影視劇所描述的也不一樣，皇帝並非今人所想，如此專制跟獨大。
在古人的認知裡，「皇帝」必須要對「天」負責，然而「天」是什麼？ 「天」自然不是一個人，若以西方理論的語境來談，「天」可以看成是一種皇權、政府、人民三者之間建立的「社會契約」（social contract）。此三者如何處理與「天」的關係，尤其是談到內外朝博弈與士紳階級的環節，非常值得經營 DAO 的人參考。
讀完不見然能知道什麼制度可行，但起碼能知道怎樣的制度過去會翻車。</description></item><item><title>花好月圓不總是寓意美滿</title><link>https://hychen.me/posts/20221002201959-%E8%8A%B1%E5%A5%BD%E6%9C%88%E5%9C%93%E4%B8%8D%E7%B8%BD%E6%98%AF%E5%AF%93%E6%84%8F%E7%BE%8E%E6%BB%BF/</link><pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002201959-%E8%8A%B1%E5%A5%BD%E6%9C%88%E5%9C%93%E4%B8%8D%E7%B8%BD%E6%98%AF%E5%AF%93%E6%84%8F%E7%BE%8E%E6%BB%BF/</guid><description>有一年參加朋友婚宴，辦在體育場，頗是浮誇，宴請的賓客不少，入座許久，婚宴仍未開始。
他的哥哥（也是我朋友）許是無聊，便從主桌跑來我這桌吐口水，與我說些心底話。哎！我這是長得很像情緒垃圾桶嗎？哪裡不坐，坐我旁邊，妨礙我吃飯。對社交失能者來說，婚宴這麼無聊的活動，能幹的正經事只有「吃」。這兄妹情怨！兩性啊！婚姻啊！我懂什麼？我就懂吃飯！隔壁桌星海羅盤葉教授功力深厚，怎不去那邊請教？怕是人家帶了個兒子，在小輩面前聊這些，不好意思？
朋友是個妙人，其貌不揚，穿著邋遢，常年鶯鶯燕燕環繞，御姐與乾妹不少，叫人欣羨，誰叫他才高八斗，在流行音樂產業成名極早，可這麼多年來，總是單著。每次碰面，不是分享他的感情失敗史，就是嚷著想結婚沒女朋友。現下想來，當年他應是抱著弱弱相殘的心態，來找同樣單著的我吐苦水。不然找了這桌另一對恩愛非常的情侶講這些話，情緒沒宣洩到，反倒自傷七百。
聊了一會，新娘要進場了，他也就回主桌了，而我則進行我的正經事，吃！只有等待下一道菜的空檔，才在同桌其他友人話題中插上幾句。滿盤上、空盤下，直到輪到「花好月圓」這道菜上來。
這道菜，該如何評價它呢？剛炸好的湯圓鋪在白盤上，有紅色、白色，上頭撒上香噴噴的花生粉，我不能說喜歡，也不能說討厭，就是有點膩。如果不是在喜宴中吃到，排斥感會低些。為何？ 說來與臺灣的習俗有關，但凡婚宴是依傳統吃台式合菜，必定有這一道。有時在菜快上完時送上，有時在第一道菜出。
炸湯圓與「花好月圓」的關係不甚清楚，但取這名多半是是用來祝福新人婚禮圓滿，白頭偕老。典故出自宋·晁端禮《行香子·別恨》一詞：
莫思身外，且逗尊前 ，
願花長好，人長健，月長圓 。
對於這觀點，我向來是習以為常，沒覺得有什麼不妥，直到讀到一闋宋詞《木蘭花》，才知曉花好月圓還有另一種解讀，於是有感而發說道：「其實花好月圓不一定是美好的，也可能會分離後因為曾有過的歡樂而更痛苦」，繼而唸了一下頭一句：「人意共憐花月滿，花好月圓人又散」。簡白的理解，是指人們都喜愛花好月圓，但到了花好月圓時大家歡樂後又離散了，用來慨嘆人世美事不能兼得，過往的美好反倒加深痛苦。「花好月圓」不只可以拿來祝福人，也能拿來咒人。
透過共同經歷，做出情緒轉折，來強調末了要帶出的情緒，類似手法，元稹也在悼念亡妻的《遣悲懷》用過：
遣悲懷[唐]元稹 昔日戲言身後意，今朝都到眼前來 。
衣裳已施行看盡，針線猶存未忍開 。
尚想舊情憐婢僕，也曾因夢送錢財 。
誠知此恨人人有，貧賤夫妻百事哀 。
其中「誠知此恨人人有，貧賤夫妻百事哀」翻譯是：「我當然知道這種思念人人都會有，但正因為我們這對夫妻經歷過那麼多苦難，離別後，每件事情都讓我觸景傷情，悲上加悲！」，兩著的差異在《木蘭花》用在點題，用花月滿對人又散，一句將歡樂與分開後的痛苦對比出來，而《遣悲懷》則用做結尾，在前面對亡妻的遺物，娓娓道來如何引發他的思念後，才末了用該句結尾，讓讀者感受到作者的無助與無法自制，讓讀者感受到他有多痛。
後來，同桌的那對情侶便決便定他們婚宴上不要有花好月圓這道菜。這兩位婚後已過七年，感情尚稱美滿，婚姻尚未有裂痕。我就不要臉的，權當成是我賣弄冷知識的功勞。
下為木蘭花全文：
木蘭花[宋]張先 人意共憐花月滿，花好月圓人又散 。
歡情去逐遠雲空，往事過如幽夢斷 。
草樹爭春紅影亂，一唱雞聲千萬怨 。
任教遲日更添長，能得幾時抬眼看 。</description></item><item><title>我們究竟是思想曝露過多還是過少？</title><link>https://hychen.me/posts/20221002202534-%E6%88%91%E5%80%91%E7%A9%B6%E7%AB%9F%E6%98%AF%E6%80%9D%E6%83%B3%E6%9B%9D%E9%9C%B2%E9%81%8E%E5%A4%9A%E9%82%84%E6%98%AF%E9%81%8E%E5%B0%91/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002202534-%E6%88%91%E5%80%91%E7%A9%B6%E7%AB%9F%E6%98%AF%E6%80%9D%E6%83%B3%E6%9B%9D%E9%9C%B2%E9%81%8E%E5%A4%9A%E9%82%84%E6%98%AF%E9%81%8E%E5%B0%91/</guid><description>有一日又讀了〈如何想靜靜〉一遍，發現自己本來打算進行的長文為王，一年一更沒做到。往往是忽有所得，便迫不及待的想在社群媒體上與人交流。曾在某處看到一詞形容這個行為 - 思想暴露狂，很是讓我驚恐。但又覺得不持續發言撈撈叨叨二三句，在網路上捲起千層雪，證明自己「活著」，談何容易？ 你看 Vitalik 等名人不是經常「被死亡」。
過去於網路發佈了許多斷簡殘編，如今蒐羅匪易。架過多次 blog，卻總是隔個幾年便大手一揮，任其煙滅，圖個重生。然而過去真能過去嗎？ 真是個大哉問! 在這眾口鑠金，他人能在社群軟體上定義你是誰，導致社會性死亡的年代。
很快，便在網路上得了原作者回覆，給了一個極有意思的觀點：300萬字的思想做後盾。
「為什麼『他人能在社群軟體上定義你是誰』？也許正是因為你的思想暴露太少。如果思想暴露總是『撈撈叨叨二三句』，那麼他人便無從得知你的全貌，進而他想怎樣定義你就可以怎樣定義；若不幸面對網路暴力，你就會無力還擊。若自己寫出三百萬字的思想作後盾，那麼恐怕眾口沒那麼容易鑠金吧。一點個人愚見。」。
我覺得他這個觀點非常有道理，值得一再咀嚼。我想這也是在社群軟體做破碎式，不連貫發言的弊病。本來在想「這年代大部分人的問題是輸入過多，輸出過少」與我看法不同，因我覺得這年代大部分人的問題是「輸出過多，輸入太小。但也許癥結其實是輸出太短，太破碎，確實是輸出的（資訊密度）過少。</description></item><item><title>也許我們永遠解決不了媒體亂象</title><link>https://hychen.me/posts/20221002202842-%E4%B9%9F%E8%A8%B1%E6%88%91%E5%80%91%E6%B0%B8%E9%81%A0%E8%A7%A3%E6%B1%BA%E4%B8%8D%E4%BA%86%E5%AA%92%E9%AB%94%E4%BA%82%E8%B1%A1/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002202842-%E4%B9%9F%E8%A8%B1%E6%88%91%E5%80%91%E6%B0%B8%E9%81%A0%E8%A7%A3%E6%B1%BA%E4%B8%8D%E4%BA%86%E5%AA%92%E9%AB%94%E4%BA%82%E8%B1%A1/</guid><description>每次看到有人罵媒體亂象時，我就開始想為什麼人們看新聞不付錢, 付夠高的酬勞讓人生產高品質的即時新聞。 有趣的是大家都喊要 高品質的新聞 ，但沒人付錢（講心酸的）。有時無聊就開始拿紙筆出來拆解 Pre-Internet 時期報紙、電台、電視在經濟，政治，社會面對人們的價值， 看有多少種類被 Mobile App, Web App 取代的，有哪些還沒。
人們並不真的想要真相 本來以為人們今日需要的是盡可能貼近事實的報導，後來觀察一段時間發現人們並不是要真相，但也可能只是我的生存者偏差。分享啊！評論啊！ 其背後的目的是為了擴展自己的社會資本，讓自己支持的，對自己有利的立場獲得最大程度的擴散以盡可能轉化更多的人數成為自己的陣營，讓敵對立場因為社會壓力而失聲。
稍微懂點算數就可明白，當即時新聞以分為單位被迅速發布後，又被一堆閱聽者以分為單位再傳播再傳播，內容查證這個動作怎麼可能用人力處理? 又有多少人只看標題或內文立場與他相似就順手轉了。
那這樣每次新聞熱點發生，我對每篇其他朋友轉的新聞都給它奉行停，看，聽。這篇新聞剛出，某 A 立轉, 過一陣子就有相反立場的文章（second source），甚至是當事人的 Facebook 澄清文（raw data）出現，如此不斷循環，直到人們不在感興趣，才漸漸蓋棺論定。
如果能把這個循環過程都記錄下來並整理成摘要，每日給我個日報就好了。如果一個新聞事件與我的直接關係不大，我也只需要這個日報就好⋯⋯
如今的新聞不是新聞 2013 年在林雨蒼牽線下，與卡市達創業加油站創辦人邱于芸有過一場關於新媒體的閒聊，她如此說道。
現在的新聞根本就不能算是新聞
我與她抱持相同的看法，這些東西充其量只是一些惱人的雜訊而已，也就是說，我覺得當代人有必要再思考一件事情，那就是「為什麼我們要讀新聞 ？」。 在這資訊爆炸的時代，什麼樣的新聞才能稱之新聞，我花了時間讀了這則新聞有什麼好處，能有什麼啟發嗎？ 能幫助我做更好的決策嗎? 能讓我這個社會體系中獲得聲望嗎?。
經由內容吸引群眾議論產生宣傳對廣告主有價值的宣傳版面，這是現今內容慘業「羊毛出在羊身上，豬買單」的模式，也就是這個模式造成現在的媒體亂象。要做好內容這件事的確是無庸置疑的，但什麼叫做「好」的內容，好到閱聽者願意買單，我覺得才是目前該探究的事情。
又或是，幾年前覺得，現在的文字、影像新聞媒體只是呈現一些離散的資料，在上面提一些觀點（資訊），但前面離散的資料其實沒有真正萃取出對閱聽者有用的資訊, 甚至連時間，空間，不同立場都沒有用更好的方式呈現讓閱聽者理解整件事的發生脈絡。每一篇新聞報導出來（以現在的品質），閱聽者都必須要再花時間去驗證，在他腦中的價值體系建立起位置，得出此篇新聞對他（閱聽者的價值）。換言之內容可以是免費的，因為要奪取市佔率，但是閱讀體驗以及萃取後的資訊則可以是有價的。這樣，也許能讓新聞產製者，保有經濟獨立性，不被左右。
事情沒有那麼簡單 現下，看來當時是天真了，高品質文章並不會帶來營收，低俗抓眼球，粗糙濫製頻繁發佈的文章才能。時代的滾輪繼續無情的碾壓我們，如今的新聞產業還是如這句一般：
我們的生意可不在於提供新聞與資訊，也不在提供製作優良的音樂，我們的生意也只是販賣我們客戶的產品 by Lowry mays
如果新聞不回到閱聽者買單，也許我們永遠解決不了媒體亂象。</description></item><item><title>無守戰之備而輕攻伐者，可亡也</title><link>https://hychen.me/posts/20221002201601-%E7%84%A1%E5%AE%88%E6%88%B0%E4%B9%8B%E5%82%99%E8%80%8C%E8%BC%95%E6%94%BB%E4%BC%90%E8%80%85_%E5%8F%AF%E4%BA%A1%E4%B9%9F/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002201601-%E7%84%A1%E5%AE%88%E6%88%B0%E4%B9%8B%E5%82%99%E8%80%8C%E8%BC%95%E6%94%BB%E4%BC%90%E8%80%85_%E5%8F%AF%E4%BA%A1%E4%B9%9F/</guid><description>沒經歷過戰爭的政治人物，甚至是 2019 年才開始關心時事的人，才會在完全沒有勝算時，在網路上叫囂要戰爭。我討厭戰爭，但臺灣現在靠仇恨尋租獲取利益的人越來越多，甚至從反中華人民共和國，升級從文化上反華。只要後者成為常態，兩年後兩岸開戰我覺得無可避免。
知名小說《銀河英雄傳說》裡的主角楊威利有一句經典語錄，很發人省思：
人類各種行為中，最為卑鄙無恥的是什麼？——權力的擁有者和諂媚權貴的人藏身於安全的場所，歌詠戰爭的偉大，用愛國心和犧牲精神的名目，強制將與自己無關的人送往戰場，這種行徑最是無恥！
而今臺灣，越是沒有從軍經歷的政治人物，越愛侃侃而談軍事議題，任意以愛國心做情感勒索，煽動群眾，取得政治資本，叫人如何不對當下時局感到憂心。
逝世的奶奶，出生於日治時代，卒於民國。她有一本班黃的小冊子，上面記載著艱苦的日子的點點滴滴。戰爭是很苦的啊！沒有經歷過戰爭的人，才會膝反射地在社群網路上，說著：「真打起來，我會如何，如何，又如何。」可是你要是問他現實生活中，做了什麼準備呢？ 那回答就會很有趣。
昨天去許久未去的 HackingThursday 聚會時，不免俗地會聊到烏克蘭戰爭，在聊到會不會上戰場時，有一人拿了前陣子流傳極廣的文章中的論點：「文科生會比工科生還容易被派上戰場，所以讀書時要選工科讀」作為談資，該文指出：
理工科系出身的，在後方研發武器彈藥會更有用，因此待在後方的比例較高；就算調往前線，也大多留在船艦大砲等陣地，而不是放在野戰部隊衝鋒陷陣。
，而文法商學系的同學就沒這麼好運了，野戰部隊拼搏損耗率大，所以多被拿去填補戰力缺口，而這不是日本獨有的案例，文中又提到:
1814 年，俄奧普聯軍兵臨巴黎城下之際，拿破崙亦猶豫過要不要讓理工學校的學生參加首都保衛戰。對此，拿破崙的決定是『我不願為取金蛋而殺掉我的母雞。』拒絕讓理工學生參戰。
所以該工程師因此資訊工程師不太會被派上戰場，因為資訊工程師在別的地方可以發揮更大的作用，並對其他與會者說：「所以我們被送去戰場的機率很低，不然你看我這身材，我上戰場也不能做什麼。」（該人體態肥胖）。須與，我抬頭望了望他，不以為然地回了一句：「可以當砲灰。」。
全場靜默一會，才用笑聲掃去了短暫的沈重。</description></item><item><title>2022 鹿港行</title><link>https://hychen.me/posts/20221002203114-2022_%E9%B9%BF%E6%B8%AF%E8%A1%8C/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002203114-2022_%E9%B9%BF%E6%B8%AF%E8%A1%8C/</guid><description>2022 從臺中鹿港兩日四萬步深度旅行開始，這次行程結束後，我宣佈臺灣最好吃的炕肉飯佐豬腳早餐就在鹿港，沒有之一。皮滑而軟，入口即化，不管是炕肉亦飯皆然。美中不足的是，稍嫌油膩，在店家詢問是否點湯，應順道加點味增湯，或許可讓此次體驗更佳。凌晨五點要抵達這件事對於凌晨三點去排六千牛肉湯的我表示，一點難度也無。何況食畢還可繼續回籠補眠。
此次入住民宿位於天后宮旁的宮后文旅，該館位處美食與景點要衝，不管去向何處都非常方便，惟該棟僅三層樓高，因此未設有電梯，如果家人行動不便，則不建議選擇此間。
在散策過程中，中山路走了不下九遍，可說該路地位相當於北市忠孝東路，迷路中可作為北極星、定海神針，讓你在不打開手機地圖下知道仍可快速知曉自己位置。兩日步行真是耗體力，尤其腳底特別勞累，於是中間在鹿港文物館古風樓的咖啡店歇了一會。這間咖啡館咖啡乏善可陳，味道稀而無味，不建議點。
鹿港文物館是辜家老宅，後捐出來做公共使用，建物分為閩式與日洋混搭三座，其中一樓被用於辦公，遊客無法進入。策展方向盡量呈現六七十年前的內裝，使遊客了解該時起居狀況。印象最深則是大小姐閨房內的床出乎意外的小，莫不是彼時臺灣人身高皆不足155？
至於臺中，彩虹眷村果然名不虛傳，值得一去，只是該處附近僅有一家貓門餐廳，費用高昂，讓我頗有肥羊被宰之感，讀者若欲去該處，最好還是在它處飽食後再前往，才不會在旅途中夾雜了幾絲怨氣。</description></item><item><title>臺南舊城區越來越難以保存的美麗天際線</title><link>https://hychen.me/posts/20221002202700-%E8%87%BA%E5%8D%97%E8%88%8A%E5%9F%8E%E5%8D%80%E8%B6%8A%E4%BE%86%E8%B6%8A%E9%9B%A3%E4%BB%A5%E4%BF%9D%E5%AD%98%E7%9A%84%E7%BE%8E%E9%BA%97%E5%A4%A9%E9%9A%9B%E7%B7%9A/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002202700-%E8%87%BA%E5%8D%97%E8%88%8A%E5%9F%8E%E5%8D%80%E8%B6%8A%E4%BE%86%E8%B6%8A%E9%9B%A3%E4%BB%A5%E4%BF%9D%E5%AD%98%E7%9A%84%E7%BE%8E%E9%BA%97%E5%A4%A9%E9%9A%9B%E7%B7%9A/</guid><description>我們學歷史，很少留意地貌的轉變，課堂上也不會考，但如果拿來當旅遊途中的解謎任務，權做遊玩大地遊戲，那就很有趣味。
神農寺位於臺南神農街末端，是著名景點之一，多數為專賣文青小物店鋪，頗受年輕人喜愛。巷子兩旁建物與大稻埕類同，兩層樓高，前為店舖，後用於進貨，二樓則為住家。此區域土地鬆軟，不可建高樓，蓋因古時曾為河流。
臺南古來有五條河流貫穿，肩負貿易貨物流通之責，謂之五條港，現已不見蹤影，只剩些文物提醒地貌轉變。其中寺廟便是很好的參考指標，像神農廟這類寺廟多位為於河末，主要因出海需要有精神寄託以及祈求平安，最能體現這需求的寺廟名稱，便是風神廟。
風神嘛！當然是祈求風調雨順，不要翻船。另一個地點便是水仙宮，仔細找找，你可以發現賽龍舟的碑文。舊城區是有很多地方過去不是陸地的。
赤崁樓是臺南的著名景點，週邊小吃不少，最為有名的應是石精臼牛肉湯，評為四星級。相較於六千牛肉湯需要在早上凌晨三點排隊才能享受精華，他的用餐時間是比較親民的。早到跟晚到的差別是肉質鮮度與湯頭濃淡。比較細膩的比較，網路上資源頗多，不再贅述。
多數人至臺南，往往第一印象便是尋找美食。我卻不然，我喜歡鑽小巷，在灰色叢林間別見天地，看早年古建物，像是早期經商有成富貴人家所自建的洋樓，或是傳統閩式建築。知悉赤崁樓往安平方向為內海這件事的人不是太多，而知道赤崁樓附近有一間荒廢掉的木造閔式三合院，也不是太多，雖以破敗不堪，但仍大致可看出格局，以及家族曾有的輝煌。
據他人轉述，應是清朝所建，且開價八千萬待價而沽，佊時據說有建商感興趣改建為飯店，然而有些文史工作者希望保留。我們前往這類廢墟，屢屢被交待不可拍照，或是做出有可能透露出地點的舉動，究其原因，乃是怕古建築半夜自燃。
民間文史工作者曾經倡議，臺南舊城區應該要如日本京都一般，在法律上予以限高，使其美麗的天際線能與信仰與日光一樣恆古永存，然而此一建議往往不受待見，不管是哪一黨執政，皆然。
隨著臺南台積電擴廠，房地產逐漸火熱，舊城區天際線看來是岌岌可危，能多看一天是一天。</description></item><item><title>憶臺南漁光島</title><link>https://hychen.me/posts/20221002202743-%E6%86%B6%E8%87%BA%E5%8D%97%E6%BC%81%E5%85%89%E5%B3%B6/</link><pubDate>Wed, 15 Sep 2021 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002202743-%E6%86%B6%E8%87%BA%E5%8D%97%E6%BC%81%E5%85%89%E5%B3%B6/</guid><description>初至漁光島，其時尚未有長官關愛，政策規劃未至，還是一個樸素之地。我四歲以前住在嘉義，由奶奶照顧，居住在被田園包圍的平房中，對於這樣的生活，自然是帶有點天真的嚮往，童年記憶，總是隨著年歲漸長，越來越美化，恨不得時光倒回，重返其中。南拳媽媽的《牡丹江》有句歌詞寫得很好：「到不了的都是遠方，回不去的都叫家鄉」。
都市久居，每日醒來，放眼望去，無翠綠林，無蔚藍天，灰濛濛一片，路上只得車水馬龍，叫人好不壓抑，漁光島這樣人煙稀少的景點，無疑是我的心頭好。
漁光島位於臺南安平區，相較於中西區，非常冷門。島上交通不便，與臺灣本島只有一座大橋相連，欲至此，需驅車前往，若夜間孤身前來，燈光昏暗，很是可怖。
從大橋進來，便會見到一條大馬路，路旁偶有休旅車，通常是前來慢跑的臺南本島市民。島上有一間小學，如果我沒記錯，體育課是教騎馬，很是令人欣羨。哎！我小時後的體育課除了躲避球外，還是躲避球，有夠無聊，若當年有騎馬課，我或許不會如現在一樣，成為一個四體不勤之人。
小學體育課之所以可以學騎馬，想必是因為漁光島有一馬術場。據聞馬術師須從小訓練，與馬培養感情，有潛力者，國中以後便不再升學，朝職業選手邁進。
關於馬術，我所知不多，此些種種，是在屏東車城的一間主打讓旅客自行拿著韁繩控制馬，到野外的路線看風景的度假村聽聞而來。像這樣不是在馬場繞圈的場域不多，是真的讓你騎上馬在林地穿梭，涉水，卻不要求你有馬術技能，因為這些馬皆受過訓練，由受訓過的人帶領。當馬兒怠惰頻繁吃草，不前行時，便會由受訓過的人以哨聲控制，督促按既定路線前進。我初次騎馬，由於毫無經驗，總擔憂是否使馬兒不適，各種操作不敢使勁，結果是任憑馬兒我行我束，越走越慢，屢次被騎在前頭帶領的黃毛小兒告誡，不可對馬兒太好。
若能騎馬繞行漁光島，無疑地，相當吸引人。
此時島上商業活動幾無，我騎車繞繞，瞧不見有什麼商店，只有一間以清水模工法為特色的民宿，其餘皆是方盒子般的傳統平房，還有一些閩式紅磚三合院，這些三合院由於還有人居住，雖說我很有興趣觀察，但不敢多看，怕得了個「侵門踏戶」之稱。
小島自然亦無餐廳，旅人來此，最好自行攜帶野餐盒，在海灘邊，配浪花、落日佐海風食用。若有藝術素養者，還可學某位藝術家，利用海灘上的浮木、石頭，以及人造垃圾，也搭建個藝術作品來，成為網紅熱衷的拍照景點，思維浪漫者，甚至可在作品上留下 Line ID，看會否遇著另一個可人兒。我就曾在漢本車站不遠的海灘上，看過有人用過這招。讀者如果依此法獲得人生伴侶，還望告知，分享際遇。
後來漁光島得到臺南市府關愛，擬了一個觀光計畫，也不曉得現今景致如何？</description></item><item><title>別讓你的悲哀，成為時代的悲哀</title><link>https://hychen.me/posts/20221002201736-%E5%88%A5%E8%AE%93%E4%BD%A0%E7%9A%84%E6%82%B2%E5%93%80_%E6%88%90%E7%82%BA%E6%99%82%E4%BB%A3%E7%9A%84%E6%82%B2%E5%93%80/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002201736-%E5%88%A5%E8%AE%93%E4%BD%A0%E7%9A%84%E6%82%B2%E5%93%80_%E6%88%90%E7%82%BA%E6%99%82%E4%BB%A3%E7%9A%84%E6%82%B2%E5%93%80/</guid><description>最近讀書時，讀到一句「別讓時代的悲哀，成為你的悲哀」頗有感觸。社會就像是一個壓鑄廠，無時無刻不在試圖將你澆灌成型，讓所有人樣子無分一二。不管你愛或不愛，在恰如其分的年紀，你終究得扮演著別人希望你恰如其分扮演的角色。我們都是被一個更大的群體包圍著。
不過，我覺得也不要讓你的悲哀，成為時代的悲哀。特別是那些協助研擬政策的幕僚或是意見領袖。將私領域對抗原生家庭的悲苦情緒帶進公領域，終究是不道德的。「社交軟體上所有惡毒的言論皆來自於自身境遇不順遂帶來的負面情感投射」是某次飯局間聊到唐鳳擔任政務委員，連連引發爭議，遭控忘記入閣初衷時，我有感而發的一句話。
然而這篇並不是要說唐鳳如何如何，基本上我還是很肯定唐鳳入閣後帶來的正面效應，瑕不掩瑜。若一味處於道德至高點指責，是對處於相同階級的自己利益不智的行為。當意識到「人們只想看見自己想看見的東西」後，如果吵贏沒有獎勵，就不要花時間與人在公共事務爭執，是件務實的事情。於是在「數位空間（Cyber Space）」不小心爭執，區分對方是真心要理出個道理來，還是因屢受父母輩輕視，連帶恨上父母輩所成長背景建構的價值感，甚至連帶恨上與「華」字符號關聯上的一切，只為宣洩不滿情緒，對我來說便是一件重之又重的事情。
《未央歌》有一段說得很好：「大凡愛說閑話的人，用心的很少。&amp;hellip;你要用慈悲不忍的心來可憐這些做事不經心的人，又來為自己堅定勇氣。我們有責任改正這風氣，扶助正義感，也改正自己的過失。因為過失是引導別人來謾罵的。」
現如今議論時事，只有兩個準則，一為影響生命，二為影響投資標的，否則通常是懶得回，懶得應。說出你覺得是怎樣就怎樣，然後自己該做啥就做啥，顯然是在這網紅橫行，群魔亂舞時代中，吾輩維持平和心境的不二法則。
人用三年學說話，用一生學閉嘴。萬言萬當，不如一默。</description></item><item><title>我的旅遊路線原則</title><link>https://hychen.me/posts/20221002201342-%E6%88%91%E7%9A%84%E6%97%85%E9%81%8A%E8%B7%AF%E7%B7%9A%E5%8E%9F%E5%89%87/</link><pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002201342-%E6%88%91%E7%9A%84%E6%97%85%E9%81%8A%E8%B7%AF%E7%B7%9A%E5%8E%9F%E5%89%87/</guid><description>我曾耗費一年在臺南生活，那時奉行著用腳閱讀城市的原則，踏查了許多鮮為人知的景點。這些景點外觀可能沒任何特點，一般大眾也不太曉得。可若你知曉些大多數人不知道的故事，就會覺很有意思。可說是：「明察秋毫，見藐小微物，必細察其紋理，故時有物外之趣。」說白了，就看你有沒有一雙發現美的眼睛。
在這些大多數人不知道的故事中，我最著迷的，是我成長過程中，教科書不教的歷史。緣由嗎？說來好笑、膚淺，就是享受結伴旅遊，路過這些地點時可以說出「你知道嗎？」帶來智識上的優越感。
比如說逛到林百貨頂樓上的機槍陣地，可以問問身邊的友人：「你知道這機槍打的是美國人嗎？」；比如說逛到冰鄉水果店，享受物美價廉的芒果冰時，問一句：「你知道為什麼這條路上的店都營業這麼晚嗎？」；比如說走到成功大學的成功校區，問一句：「你知道這裡以前是兵工廠嗎？」
是不是很欠打？
我的旅遊路線，基本上是沿著當地過去的歷史而行，力求深入而非僅僅到過。每次走到某個古蹟，總覺得自己在代天巡狩，看看這些老朋友是否還在，是不是斑駁又多了些？還是說自燃了？還是說像西市場一樣，承擔吸引人流的責任，被市府重新妝點粉墨，準備登場，走入大眾視野。
西市場又名大菜市，是一座擁有百年歷史，至今功能俱在，仍在運作的市場，但對到臺南遊玩的旅客來說，反倒不如正興街上的冰淇淋來得有吸引力。作為一個近代和洋混合風格的日據時期建築，佈局很有戰後特色，非常值得一看。一樓為市場，二樓是加蓋，後來因為營業的舞廳發生一場大火，奪走許多人命，被市府封了，所以即便當初我被帶到可以上去二樓的樓梯，仍舊無法看到內部結構。
尤記當初造訪西市場時，外觀乍看以為是鐵皮屋，醜陋不堪。香蕉庫房尚未翻修，屋頂上跟外牆仍有鷹架。如非被告知，仔細觀看，你很難看出這棟建築的風格與臺灣文學博物館、國立臺灣歷史博物館是相同流派。知悉耗時三年的整修工作接近完成，我有些許開心，些許遺憾。開心的是更多古建築被重視。遺憾的是私房景點又少了一個，以及 Covd-19 疫情肆虐，無法前往。
除了西市場，附近的西來庵王爺廟，有一塊地磚也少有人知。這一塊地磚是紀錄噍吧哖事件（1915 年），據說在日人屠殺漢人與西拉雅人時，王爺廟便是當時的藏身處。又有一說，王爺廟是當時漢藩共謀策劃之處。哪一個為真？我不是歷史學者，若有錯誤，歡迎斧正賜教。
沿著噍吧哖事件的歷史事件線，我又接著晃到新化，並順道參觀了楊逵文學館，最先映入眼簾的，是一把扇子，扇面寫了斗大的「土匪婆」三字，很是讓人莞爾。扇子是楊逵送給妻子葉陶的。葉陶是誰呢？年輕一輩對這兩者可能很陌生，但經歷過 318 事件的人，除了林飛凡外，想必還知道魏揚，葉陶便是魏揚的外曾母。其母楊翠後來任職促轉會。這搞運動的本事，倒是頗有家傳淵源。（這裡不想討論政治上的對錯，只是補充景點相關歷史背景）
因為上一輩務農的關係，總是困惑務農者為何無法得到應有的報酬。他們的生產者剩餘去了哪裡？真的是如大家所說的被盤商剝削嗎？又恰巧，某一晚吃卓家魚麵時，偶遇馬世芳跟他老婆，剛好那一陣子交工樂隊很是熱門，聽了些美濃抗爭的故事，遂對臺灣農民運動產生濃厚的興趣。於是我便順著這個人物關係，知道了簡吉，知道了鳳山農民組合，也知道了「二林蔗農事件」。每知道一個事件，我的旅遊路線清單就又多了一個想去的地點。
除了透過爬梳人際關係，事件來獲得旅遊路線靈感外。歷史上的文件內容，也是材料之一。對于實地考察，印證當初閱讀知道的內容，總是讓我樂此不疲。好比說，當書上說寺廟是漢人來臺時，鄰里的仲裁中心、娛樂中心，也是械鬥時的指揮所。我在路過西門國小時，就會遙想當初泉漳械鬥，兩方分別用大稻埕、龍山寺為據點，隔著一座湖泊互相對峙。西門國小原址為湖泊。或是說，由於某種文化或習俗的關係，所以當你看到某些建築，你就會想要鑽進旁邊的小巷，看附近是不是有書上提到的附件，或是應該出現在這邊的小物。這過程到有些像在玩解謎遊戲。
這些農民運動原始文件中，有一篇起義文令我讀來為之動容，確切內容幾乎忘光，只依稀記得有一句：「佊是人，我亦是人⋯⋯」這樣感慨，同樣為人，卻因不是地主階級遭受不公待遇。
一直很想找到這篇文章，如果找到，我想我應該又會因為這個起義文，發想出另一個有趣的路線。只可惜，雖說網際網路資料浩瀚如海，但卻到如今找也找不太到。有人說：「誰在意，誰痛苦。」我想還是歡情去逐遠雲空，往事過如幽夢斷，忘了這件事吧！
備註：後來有網友補充其起義文應為大甲農民組合綱領。</description></item><item><title>Jobs to Be Done 有兩種？</title><link>https://hychen.me/posts/20221002203814-jobs_to_be_done_%E6%9C%89%E5%85%A9%E7%A8%AE/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002203814-jobs_to_be_done_%E6%9C%89%E5%85%A9%E7%A8%AE/</guid><description>如同「公地悲劇」這個術語，實際上有兩篇（1968, 1993）論文討論，看法敻然不同，造成多數人在議論時指涉混淆。
Ulwick 是 《Jobs to be done: theory to practice》一書的作者，這本書在臺灣新創圈受到熱烈推薦。然而大多數人不知道的是，Ulwick 在 twitter 上卻被質疑錯誤詮釋了 Christensen 的 Jobs-to-be-done 的概念，而後 Christensen 也做出了澄清。
簡單來說，Jobs-to-be-done 這個術語 Christensen 跟 Ulwick 各自提出了兩種不同詮釋的 Jobs to be Done。這產生了混肴。對此，Alan Klement 於 2020 年撰有一文給出說明。
這兩種 Jobs-to-be-done 的詮釋分別是:
Jobs-As-Progress Jobs-As-Activities Jobs-As-Progress 是 Clayton Christensen, Bob Moseta, Alan Klement 提出的一種理論，這個模型指出消費者不想做任何工作，他們實際上想要的是正向改變他們的人生。
因此，產品開發者應該專注在如何幫助消費者達成改變。理想狀況下，消費者不需要做任何事情。Klemenet 同時提到，這個理論仍在發展中。任職 Facebook 新產品實驗部門，同時也是天使投資人的 Mohanty 基於這個理論給出了一個適用於 startup 的 JBTD 範本。
Jobs-As-Activities 則是由 Ulwick 提出的一種實踐型方法論， 這個模型指出消費者模型購買產品，是因為他們想透過產品進行他們手上的工作。因此，產品開發者應該專注在他們怎麼使用產品，如何讓他們更有效率。
這個模型源自於 Ulwick 在 1991 年提出 (Ulwick，無年代)。
我認為將這兩種不同的概念分別以 Changes-To-be-done，以及 Activities-To-be-done 分開稱呼，在討論上會比較容易精準指涉，Job 一詞實在太過語意不清。</description></item><item><title>重新拾起寫作</title><link>https://hychen.me/posts/20221002203833-%E9%87%8D%E6%96%B0%E6%8B%BE%E8%B5%B7%E5%AF%AB%E4%BD%9C/</link><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002203833-%E9%87%8D%E6%96%B0%E6%8B%BE%E8%B5%B7%E5%AF%AB%E4%BD%9C/</guid><description>過往從不做筆記，現在驚覺這樣沒有人生積累，講起一個自己的想法，總是忽略介紹前置知識，去脈絡下無怪乎別人丈二摸不著頭腦。遂近日開始用 org-roam 做了閱讀筆記，要求自己閱讀，必須作筆記。這樣換用一種方式讀書，極是花時間。
也許是老了，對於數位原住民這種，極為仰賴讀者資訊檢索能力，割裂式的表達方式頗為不喜，今年擬了計畫，好讓自己的語言組織能力可逐步精煉回老一輩的長文為王。短期以 800 字為目標。大概就是國中三堂作文課的水準。
久未以年少方式撰文，國文老師教的，忘的乾乾淨淨。使用標點符號，甚是生疏。竟然是何時該用逗點，何時該用句點也分不清楚。可喜的是，這樣寫著寫著，文章可以越來越長。
寫完後再看一遍這篇，還是覺得語句不通順。也罷，跟投資一樣，要做時間的朋友</description></item><item><title>程式語言中的 Assignment 與 Binding 的差別</title><link>https://hychen.me/posts/20221002195442-%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%B8%AD%E7%9A%84_assignment_%E8%88%87_binding_%E7%9A%84%E5%B7%AE%E5%88%A5/</link><pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002195442-%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%B8%AD%E7%9A%84_assignment_%E8%88%87_binding_%E7%9A%84%E5%B7%AE%E5%88%A5/</guid><description>所謂的 Functional Language 的變數不可改其實是不精確的。實際上它只是將變數分的更嚴謹，可修改，與不可修改。 先來說說什麼是 Binding。
Binding Binding 指的是將一個符號綁定在一個值，綁定後就不可修改，這個符號稱之為變數。以自然語言來理解的話，其實就是代名詞。
favonia: 一個變數沒有指到一個值。一個變數可以被一個值取代，但不會儲存什麼內容在裡面。
所以說下面這個例子， 必須理解為3.14的另一個稱呼叫做 PI, 而不是 PI 這個容器的值是 3.14。而 1 + PI 這個式子的另一個稱呼是 result, 而不是 1 + PI 運算後，將值放到 result 這個容器裡。 不管是 PI ，還是 result 都只是個代稱，而不是容器。
PI = 3.14 result = 1.0 + PI 接下來搭配 SML 來解釋什麼是 Assignment。
Assignment 下面這段源碼是說 PI 是 3.14 的 Binding, 而 result 是 1 + PI 的 Binding。程式執行時（runtime） 會把 PI 這個變數代換成 3.14 。
val PI = 3.</description></item><item><title>Serialized Python Function Object</title><link>https://hychen.me/posts/20230608220001-serialized_python_function_object/</link><pubDate>Wed, 28 Mar 2012 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608220001-serialized_python_function_object/</guid><description>利用marshal把python bytecode轉成string, 就可以pickled.
把Function轉成Pickled string
import pickle import marshal maintask_bytecode = marshal.dumps(maintask_callback.func_code) output = { &amp;#39;maintask_bytecode&amp;#39;: maintask_bytecode, &amp;#39;maintask_defaults&amp;#39;: maintask_defaults, &amp;#39;maintask_args&amp;#39;: maintask_args} print pickle.dumps(output) 把Pickled string轉成function
import sys import types import marshal import pickle ## \brief reconstruct function from bytecode # \param func_bytecode str marshaled bytecode of func_code # \param func_default dict func_defaults # \return Function def reconstruct_function(func_bytecode, func_defaults): func_code = marshal.loads(func_bytecode) return types.FunctionType(func_code, globals(), func_code.co_name, func_defaults) string = sys.stdin.read() received = pickle.</description></item><item><title>Metaclass In Python - Singleton</title><link>https://hychen.me/posts/20230608213123-metaclass_in_python_singleton/</link><pubDate>Tue, 13 Mar 2012 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608213123-metaclass_in_python_singleton/</guid><description>Singleton 這東西大家想必不陌生，在 Python 裡實做的方式滿多, 這邊用這個當例子介紹 Metaclass 可以做什麼。
概念上很簡當, 讓Class的建構子不能產生Instance, 然後再提供一個 Classmethod 能夠取得Instance(而且只能有一個), 在Python你可以用id來檢查兩個物件 是不是相同的。原則上Singleton我只會用在不用花腦袋就會覺得這個class建出來的 instance 這個程式執行時只能有一個。
class Singleton(type): def __init__(cls,name,bases,dic): super(Singleton,cls).__init__(name,bases,dic) cls.instance=None def __call__(cls, *args, **kwargs): # 這裡不raise Exception, 是因為doctest比較好寫 print &amp;#34;please use get_instance function to get the instance&amp;#34; # 你也可讓cls()直接傳回instance, 讓class user不用在意他用的class # 是不是Singleton, 他只要注意class的主功能即可 # return cls.get_instance(*args, *kw) def get_instance(cls,*args,**kw): if cls.instance is None: cls.instance=super(Singleton,cls).__call__(*args,**kw) return cls.instance 用法 把你想變成Singleton class 的 metaclass 設成 Singleton 就可以了， 後悔的話，把那一行註解起來，這個class就不是Singleton。
要注意的地方是這class的Singleton特性是可以被繼承的，但這也是為什麼我喜歡用 這種方式的原因，另一個好處是Class的功能跟Design Pattern的耦合度會比較低。 缺點就是會遇到metaclass衝突的狀況，但也不是不能解決。</description></item><item><title>How-To: Change string.template’s Delimiter in Runtime</title><link>https://hychen.me/posts/20230608221502-how_to_change_string_template_s_delimiter_in_runtime/</link><pubDate>Mon, 13 Feb 2012 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608221502-how_to_change_string_template_s_delimiter_in_runtime/</guid><description>這篇文章提到Template因為用到了Metaclass, 因此改Class或是Instance的delimiter是沒作用的, 因為Template的pattern atrtibute 在 class 建構時, 就已經決定好, 於是你只能建立一個class 來繼承他, 把Template.delimiter Overwrite掉, 這樣 Template().delimter 才是你要的, 可我實在懶得為了改delimiter就去寫一個自定義class, 原文的方式我也覺得有點麻煩, 因為要組出完整的pattern
基本上這很好解, 就 runtime 時產生一個自定義 class 就好了 :p
import string def create_tpl(content, **tpl_config): if tpl_config: tplcls = type(&amp;#39;CustomTemplate&amp;#39;, (string.Template,), tpl_config) else: tplcls = string.Template return tplcls(content) tpl = create_tpl(&amp;#39;#aa&amp;#39;, delimiter=&amp;#39;#&amp;#39;) print tpl.substitute(aa=1)</description></item><item><title>Decorator of Display Deprecated Warring in Python</title><link>https://hychen.me/posts/20230608222239-decorator_of_display_deprecated_warring_in_python/</link><pubDate>Sun, 18 Dec 2011 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608222239-decorator_of_display_deprecated_warring_in_python/</guid><description>用途: 用來警告 function 或 class method 已過時，如果有指定取代的function的話，在runtime時改用取代的function
Python 2.7.2+ (default, Oct 4 2011, 20:03:08) [GCC 4.6.1] on linux2 Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; from vsgui.api import input_text &amp;gt;&amp;gt;&amp;gt; input_text &amp;lt;function ask_text at 0x8e0009c&amp;gt; &amp;gt;&amp;gt;&amp;gt; input_text(&amp;#39;input it&amp;#39;) vsgui/api.py:45: DeprecationWarning: Call to deprecated function input_text.; use ask_text instead def input_text(*args, **kwargs): 用法一： 只宣告 Function 已被 depreacted， 不指定取代的 function。 @depreacted() # &amp;lt;- 這一段表示執行deprecated() 取得wrap function def old1(): # 當old1()被呼叫時，實際上是先呼叫wrap(old1)以取得old1 function, 再執行old() print 1 print &amp;#39;function is &amp;#39;+old1 old1() 執行結果:</description></item><item><title>使用 dh_python2 製作 Python Module Debian Package</title><link>https://hychen.me/posts/20230608223136-%E4%BD%BF%E7%94%A8_dh_python2_%E8%A3%BD%E4%BD%9C_python_module_debian_package/</link><pubDate>Sat, 17 Dec 2011 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608223136-%E4%BD%BF%E7%94%A8_dh_python2_%E8%A3%BD%E4%BD%9C_python_module_debian_package/</guid><description>Debian 官方目前建議改用使用dh_python2取代py_support及py_central, 以下是自己轉換的紀錄。 本筆記只適用打包單純的Python module, 並不適合Python module裡面有包含extension.
debian/control 修改Build-Depends及Build-Depends-Indep，改用python-all取代python-support,python-central Build-Depends: python-all (&amp;gt;= 2.6.6-3), debhelper (&amp;gt;= 7) 移除所有的XB-Python-Version，改使用X-Python-Version 指定支援的Python版本 X-Python-Version: &amp;gt;= 2.5 debian/rules 若 debhelper &amp;gt;= 7, 加上 –with python2
dh $@ --buildsystem=python_distutils --with python2 若 debhelper &amp;lt;= 7
python-support, 執行 sed -i -e &amp;rsquo;s/dh_pysupport/dh_python2/&amp;rsquo; debian/rules python-central, 執行 sed -i -e &amp;rsquo;s/dh_pycentral/dh_python2/&amp;rsquo; debian/rules 移除不再使用的檔案 debian/pyversions debian/pycompat 參考資料 dh_python2 manpange Debian Wiki:TransitionToDHPython2 Debian Python Policy</description></item><item><title>Jockey and Modaliases</title><link>https://hychen.me/posts/20230608223616-jockey_and_modaliases/</link><pubDate>Fri, 02 Dec 2011 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608223616-jockey_and_modaliases/</guid><description>Jockey 是第三方驅動程式套件管裡程式，使User可以簡單的安裝不被Ubuntu收納的閉源驅動程式 由 Martin Piit 於 UDS-N 時提出，在Onereic版本後都可以使用。
它的設計理念如下
使驅動程式的 Package Maintainer 可以利用 modaliases 宣告支援的裝置 Jockey 會檢查 package 的Modaliases Section，判斷這個 package 適不適用這台電腦， 使得User 可以輕易找出適合的第三方驅動程式，常見的ATI，Nvidia的顯卡Driver 均是使用這個方式安裝。 那麼什麼是 modaliases 呢? modaliases 其實就是讓 sysfs 把DMI table 及 Kernel 的硬體資訊 Dump 出來到檔名為 modalias 的檔案上，讓 User Space 的軟體可以讀取
$ cat /sys/devices/pci0000:00/0000:00:1f.1/modalias pci:v00008086d000024DBsv0000103Csd0000006Abc01sc01i8A 小寫英文字母代表屬性名稱, 所代表的意義每個裝置不一定一樣, v通常代表vendor ID, d通常代表device ID (通常也只用這個來判斷)
在 Arch Linux Wiki上 有篇文章，說明 modaliases 在 Kernel Module的用法，算是滿清楚的，有興趣的人可以連過去閱讀。
製作 Debian Binary Package 需修改的地方 1. 修改 debian/modaliases 寫入這個 pacakge 支援的 modaliases，以下這個範例包含4個MODALIASE Trigger，每一行皆為一個MODALIAS Trigger</description></item><item><title>在 Python 用 Data Object 傳遞資料</title><link>https://hychen.me/posts/20230608213843-%E5%9C%A8python_%E7%94%A8data_object%E5%82%B3%E9%81%9E%E8%B3%87%E6%96%99/</link><pubDate>Fri, 17 Jun 2011 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608213843-%E5%9C%A8python_%E7%94%A8data_object%E5%82%B3%E9%81%9E%E8%B3%87%E6%96%99/</guid><description>當資料耦合度很高時候, 我習慣做一個data object class把他放進去, 因為python是dynamic programming language, 所以你可以在create object時, 直接設定object attribute value
簡單版本 class Data(object): def __init__(self, **kwargs): self.__dict__.update(kwargs) # the result is hychen print Data(name=&amp;#39;hychen&amp;#39;).name 這個版本則保護了built-in attributes, 避免被污染
class Data(object): _excludes = [&amp;#39;__class__&amp;#39;, &amp;#39;__delattr__&amp;#39;, &amp;#39;__dict__&amp;#39;, &amp;#39;__doc__&amp;#39;, &amp;#39;__format__&amp;#39;, &amp;#39;__getattribute__&amp;#39;, &amp;#39;__hash__&amp;#39;, &amp;#39;__init__&amp;#39;, &amp;#39;__module__&amp;#39;, &amp;#39;__new__&amp;#39;, &amp;#39;__reduce__&amp;#39;, &amp;#39;__reduce_ex__&amp;#39;, &amp;#39;__repr__&amp;#39;, &amp;#39;__setattr__&amp;#39;, &amp;#39;__sizeof__&amp;#39;, &amp;#39;__str__&amp;#39;, &amp;#39;__subclasshook__&amp;#39;, &amp;#39;__weakref__&amp;#39;] def __init__(self, **kwargs): for k,v in kwargs.items(): if k in self._excludes: raise TypeError(&amp;#34;{0} is not a valide keyword argument&amp;#34;.format(k)) self.</description></item><item><title>夢境 320</title><link>https://hychen.me/posts/20230608185100-%E5%A4%A2%E5%A2%83320/</link><pubDate>Sun, 20 Mar 2011 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608185100-%E5%A4%A2%E5%A2%83320/</guid><description>我手拿著90手槍, 沿著樓梯一路向下,
底下黑壓壓的一群人, 緩緩步行向上,
沒人對被手槍指著有反應
一開使擦身而過的的, 是臉模糊不清的民眾,
身上著的服飾似乎是民國初期的款式
後來, 樓梯開始窄了起來,
群眾裡開始夾雜清朝官員
我貼著牆壁繼續向下
樓梯更窄了
我遇見了孫中山與蔣中正,
孫中山手持著拐杖, 側過身想繞過我繼續向上爬,
腳步有些不穩, 我摻扶了他一把
蔣中正不發一語, 表情堅毅
這兩人之前也對被槍指著沒反應
送走兩老, 恍惚間聽到廣播機傳來,
人民代表正推舉大總統的新聞
樓梯又更窄了, 那是通往哪裡呢?</description></item><item><title>口足程式設計師</title><link>https://hychen.me/posts/20230608183343-%E5%8F%A3%E8%B6%B3%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB/</link><pubDate>Tue, 16 Sep 2008 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20230608183343-%E5%8F%A3%E8%B6%B3%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB/</guid><description>如果沒有手，你不知道什麼是擁抱的感覺。如果沒有手，你不知道生活中許多理所當然的動作原來都這麼麻煩。如果沒有手，你將是什麼樣的人？
尤記得某個節慶日，我在百般無聊下窩在沙發上看電視，剛好看到公視正在介紹口足畫家，看著看著，思緒就那麼一偏，那麼一轉，在腦海中冒出了一個問題「既然有口足畫家，那口足程式設計師，有嗎？」，好似失去雙手的上肢身障者絕大多數的發展，就是成為一名口足畫家。
用腳寫程式比用腳畫圖難嗎?
好像也不是，仔細想想，程式設計對雙手的要求似乎遠較繪畫來的低，不用講究力道，不用講究角度，只是敲敲打打，以及簡單的二維運動(滑鼠定位)，不管哪一個，都是繪畫的難度指數比較高。
要寫程式就必須先解決打字問題，如果沒辦法輸入程式碼，那程式也不用寫了。首先，腳能按的按鍵一定會比手用的少，所以必須要能以有限的按鍵來輸入中文英文，類似的問題同樣出現在手機上，而以手機上輸入法的發展成熟度來看，除了輸入文字慢，其他的打字需求都可以滿足，且寫程式大部分的時間都是想，在思索，真正打字的時間則不多，所以輸入文字慢看來也不是個問題。感覺上，成為一個口足程式設計師應該是可行的。
但我們仍然沒有一個好用的腳用電腦輸入裝置，目前(以我)在市面上看到的，都是將雙手的操作思維原封不動的挪到腳用輸入電腦裝置 - 用腳來模擬手部的操作。而即使就算是個雙手健全的人，有個好用的腳用輸入裝置，對於日常應用也是便利許多，比如說，雙手用在吃飯，眼睛盯著螢幕前的小說文章，然後用腳來換下一頁。</description></item><item><title>網路人格</title><link>https://hychen.me/posts/20221002203411-%E7%B6%B2%E8%B7%AF%E4%BA%BA%E6%A0%BC/</link><pubDate>Sat, 01 Jan 2005 00:00:00 +0000</pubDate><guid>https://hychen.me/posts/20221002203411-%E7%B6%B2%E8%B7%AF%E4%BA%BA%E6%A0%BC/</guid><description>語氣、詞彙、以及藏匿在句子中的思想， 在1與0的空間中交織出一個網路人格。
於是我確信我真的從一篇篇的觀想， 漸漸描繪出一個概略的輪廓，認識了你。
只是你永遠是那樣的模糊不清析，
你終究只是個ID。
而我也靠著一次又一次的貼文， 雕塑出一個網路人格，讓別人認識部份的我，
這也終究只是個ID。
或許有天醒來，突然拋開上頭承載的人格、信譽、 人際關係，從新註冊一個 ID，從新開使。
那，這算不算一個生命的死亡？
是不是一個 ID 誕生的太容易，所以學會了說話不負責， 久而久之也將這個惡習，從虛擬中帶進現實。
我們處於一個尷尬的年代，徘徊在虛擬與真實之間。</description></item></channel></rss>